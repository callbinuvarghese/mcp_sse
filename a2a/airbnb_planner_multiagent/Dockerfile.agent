# syntax=docker/dockerfile:1
FROM ghcr.io/astral-sh/uv:0.6.11-python3.12-bookworm-slim
# one Dockerfile for building multiple agent containers with args as directory and module

# Build args (passed from cloudbuild step) 
# AGENT_DIR passed in build docker phas as AGENT_DIR=a2a/airbnb_planner_multiagent/airbnb_agent
# MODULE will be passed as either MODULE=airbnb_agent or host_agent
ARG AGENT_DIR
ARG MODULE

# Show them in build logs and fail fast if missing
RUN echo ">>> Build args:" && echo "    MODULE=${MODULE}" && echo "    AGENT_DIR=${AGENT_DIR}" \
 && test -n "${MODULE}" || (echo "ERROR: MODULE is empty"; exit 1) \
 && test -n "${AGENT_DIR}" || (echo "ERROR: AGENT_DIR is empty"; exit 1)

# Make MODULE available at runtime too
ENV MODULE=${MODULE}

WORKDIR /app

# Install shared deps (adjust if you have uv.lock)
COPY a2a/airbnb_planner_multiagent/pyproject.toml ./pyproject.toml
COPY a2a/airbnb_planner_multiagent/uv.lock ./uv.lock

# 2) Install exactly what’s in the lock
RUN uv sync --no-install-project --frozen
# lock dependenacy has issue. so using uv.lock
#RUN uv sync --no-install-project || true

# Copy the selected agent’s code
COPY ${AGENT_DIR}/ /app/${MODULE}/

# Prove the files landed where expected
RUN echo ">>> Post-COPY layout for /app/${MODULE}:" \
 && ls -la /app/${MODULE} || (echo "ERROR: /app/${MODULE} missing"; exit 1) \
 && test -f /app/${MODULE}/__main__.py || (echo "ERROR: __main__.py missing"; exit 1)

# 4) Fail fast if deps aren’t importable (build-time sanity check)
RUN /app/.venv/bin/python - <<'PY'
import sys
print("Python:", sys.version, "Exe:", sys.executable)
for pkg in ("click","fastapi","uvicorn"):
    __import__(pkg)
print("Imports OK")
PY

ENV PATH="/app/.venv/bin:${PATH}"

# 5) Run with the venv interpreter, not system python
#    (Shell form so ${MODULE} and ${PORT} expand at runtime)
CMD /app/.venv/bin/python -m "${MODULE}" --host 0.0.0.0 --port "${PORT:-8080}"
# Optional: echo again at runtime, then start the server (good for troubleshooting)
#CMD uv run sh -lc 'echo "Runtime MODULE=${MODULE}"; echo "Runtime PORT=${PORT:-8080}"; exec python -m "${MODULE}" --host 0.0.0.0 --port "${PORT:-8080}"'

